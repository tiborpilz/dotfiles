* Base Settings
Set Name and mail adress
#+begin_src elisp
(setq user-full-name "Tibor Pilz"
      user-mail-address "tibor@pilz.berlin")
#+end_src

* Font selection
I'm using FiraCode Nerd Font. TODO: Enable fonts for multiple systems
#+begin_src elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 24)
      doom-variable-pitch-font (font-spec :family "Open Sans" :size 16)
      doom-serif-font (font-spec :family "Baskerville" :weight 'light))
#+end_src

* Theme
#+begin_src elisp
(setq doom-theme 'doom-opera)
#+end_src

* Org Mode
** Base Settings
#+begin_src elisp
(setq org-directory "~/org/")
(setq org-agenda-files (list org-directory))

(setq org-use-property-inheritance t)
(setq org-log-done 'time) ; Log time when task completes
(setq org-list-allow-alphabetical t)       ; a, A, a) A) list bullets)
(setq org-catch-invisible-edits 'smart) ; don't treat lone _ / ^ as sub/superscripts, require _{} / ^{})


(setq org-return-follows-link 1)
(setq calendar-week-start-day 1) ;; start on monday
(setq org-agenda-include-diary t)
#+end_src

** Disable auto-fill-mode
Auto-fill-mode automatically adds line breaks while typing in markdown and org files.
Since those files are going to be exported to pdf or html, which take care of proper formatting, I'm disabling this.

In Doom Emacs, there already is a hook for enabling auto-fill-mode - it needs to be removed.
#+begin_src elisp
(remove-hook! org-mode #'auto-fill-mode')
#+end_src

For Markdown, add a hook setting auto-fill-mode to -1.
#+begin_src elisp
(add-hook! markdown-mode (auto-fill-mode -1))
#+end_src

** Prettier tables
#+begin_src elisp
(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
#+end_src

** Only show emphasis markers when editing
#+begin_src elisp

(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

** Use the same directory as org
#+begin_src elisp
(setq org-roam-directory "~/org")
#+end_src

** Add Org-Roam UI
#+begin_src elisp
(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam
  :commands org-roam-ui-open
  :hook (org-roam . org-roam-ui-mode)
  :config
  (require 'org-roam) ; in case autoloaded
  (defun org-roam-ui-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive    )
    (unless org-roam-ui-mode (org-roam-ui-mode 1))
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-ui-port))))
#+end_src

** Google Calendar integration
#+begin_src elisp
(use-package! org-gcal
  :config
  (setq org-gcal-client-id "CLIENT_ID"
        org-gcal-client-secret "CLIENT_SECRET"
        org-gcal-fetch-file-alit '(("tbrpilz@googlemail.com" . "~/org/schedule.org"))))
#+end_src

** Google Tasks integration
#+begin_src elisp
(use-package! org-gtasks)
(org-gtasks-register-account :name "Personal"
                             :directory "~/org"
                             :client-id "CLIENT_ID"
                             :client-secret "CLIENT_SECRET")
#+end_src

** Visual-line-mode messes with with plaintext (markdow, latex)
#+begin_src elisp
(remove-hook 'text-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'auto-fill-mode)
#+end_src

** Function to create an org buffer
#+begin_src elisp
(evil-define-command evil-buffer-org-new (count file)
  "creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)))))
(map! :leader
      (:prefix "b"
       :desc "new empty ORG buffer" "o" #'evil-buffer-org-new))
#+end_src

** Insert cdlatex enviornments and edit immediately
#+begin_src elisp
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

(defadvice! org-edit-latex-env-after-insert ()
  :after #'org-cdlatex-environment-indent
  (org-edit-latex-environment))
#+end_src

** LSP in org-babel src blocks
#+begin_src elisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

** View exported file
#+begin_src elisp
(map! :map org-mode-map
      :localleader
      :desc "View exported file" "v" #'org-view-output-file)

(defun org-view-output-file (&optional org-file-path)
  "Visit buffer open on the first output file (if any) found, using `org-view-output-file-extensions'"
  (interactive)
  (let* ((org-file-path (or org-file-path (buffer-file-name) ""))
         (dir (file-name-directory org-file-path))
         (basename (file-name-base org-file-path))
         (output-file nil))
    (dolist (ext org-view-output-file-extensions)
      (unless output-file
        (when (file-exists-p
               (concat dir basename "." ext))
          (setq output-file (concat dir basename "." ext)))))
    (if output-file
        (if (member (file-name-extension output-file) org-view-external-file-extensions)
            (browse-url-xdg-open output-file)
          (pop-to-buffer (or (find-buffer-visiting output-file)
                             (find-file-noselect output-file))))
      (message "No exported file found"))))

(defvar org-view-output-file-extensions '("pdf" "md" "rst" "txt" "tex" "html")
  "Search for output files with these extensions, in order, viewing the first that matches")
(defvar org-view-external-file-extensions '("html")
  "File formats that should be opened externally.")

#+end_src

** Org-Mode visual improvements

*** mixed pitch & org-pretty-mode
#+begin_src elisp
(add-hook 'org-mode-hook #'+org-pretty-mode)
#+end_src

*** Show passed deadlines as error
#+begin_src elisp
(setq org-agenda-deadline-faces
      '((1.001 . error)
        (1.0 . org-warning)
        (0.5 . org-upcoming-deadline)
        (0.0 . org-upcoming-distant-deadline)))
#+end_src

*** Show quote blocks in italic
#+begin_src elisp
(setq org-fontify-quote-and-verse-blocks t)
#+end_src

*** Defer font-lock
For a more responsive editing experience
#+begin_src elisp
(defun locally-defer-font-lock ()
  "Set jit-lock defer and stealth, when buffer is over a certain size."
  (when (> (buffer-size) 50000)
    (setq-local jit-lock-defer-time 0.05
                jit-lock-stealth-time 1)))
#+end_src

*** Symbols
#+begin_src elisp
(after! org-superstar
  (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-superstar-prettify-item-bullets t ))

(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)
        (?D . 'all-the-icons-green)
         (?E . 'all-the-icons-blue)))
#+end_src

** Latex fragments
#+begin_src elisp
(setq org-highlight-latex-and-related '(native script entities))
#+end_src

** Prevent org-block face for latex fragments, since they look weird
#+begin_src elisp
(require 'org-src)
(add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t)))
#+end_src

** automatic latex rendering
#+begin_src elisp
(use-package! org-fragtog
  :hook (org-mode . org-fragtog-mode))
#+end_src

** Export headings up to five levels deep
#+begin_src elisp
(setq org-export-headline-levels 5)
#+end_src

** Ignode tag
Add `:ignore:` tag to headings, so only the headings will be ignored for an export
#+begin_src elisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

** use github markdown
#+begin_src elisp
(use-package! ox-gfm :after ox)
#+end_src

** Babel
*** Julia Babel language improvements
#+begin_src elisp
(use-package! ob-julia
  :commands org-babel-execute:julia
  :config
  (setq org-babel-julia-command-arguments
        `("--sysimage"
          ,(when-let ((img "~/.local/lib/julia.so")
                      (exists? (file-exists-p img)))
             (expand-file-name img))
          "--threads"
          ,(number-to-string (- (doom-system-cpus) 2))
          "--banner=no")))

#+end_src

*** HTTP requests via babel
#+begin_src elisp
(use-package! ob-http
  :commands org-babel-execute:http)
#+end_src

*** Babel header args
See https://org-babel.readthedocs.io/en/latest/header-args/

#+begin_src elisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace")
        (:exports . "code")
        (:cache . "no")
        (:noeweb . "no")
        (:hlines . "no")
        (:tanble . "no")
        (:comments . "link")))
#+end_src
** Export to Reveal.js
#+begin_src elisp
(use-package! org-re-reveal)
#+end_src
* Markdown
** Code blocks
To set up code-highlighting in markdown code blocks, we need multiple major modes in one buffer. The package polymode promises to allow that:
#+begin_src elisp
(use-package! polymode)
(use-package! poly-markdown)
#+end_src
* WebDev
** Jest
Jest-Test-Mode.el is a minor mode for running jest via npx.
#+begin_src elisp
(use-package! jest-test-mode
  :commands jest-test-mode
  :hook (typescript-mode js-mode typescript-tsx-mode))
#+end_src
** Vue
#+begin_src elisp
(use-package! vue-mode)
#+end_src

** Svelte
#+begin_src elisp
(use-package! svelte-mode
    :mode "\\.svelte\\'")
#+end_src
* Nix
** nix-mode
#+begin_src elisp
(use-package! nix-mode
  :mode "\\.nix\\'")
#+end_src
** LSP
#+begin_src elisp
;; (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
;; (lsp-register-client
;;  (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
;;                   :major-modes '(nix-mode)
;;                   :server-id 'nix'))

#+end_src
* Copilot
#+begin_src elisp
(defun tab-complete-copilot ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

(setq copilot-node-executable "/Users/tibor.pilz/.nvm/versions/node/v16.13.2/bin/node")

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-TAB" . 'copilot-accept-completion-by-word)
         :map company-active-map
         ("<backtab>" . 'copilot-accept-completion)
         :map company-mode-map
         ("<backtab>" . 'copilot-accept-completion)))
#+end_src
